% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_complex.R
\name{complex_map}
\alias{complex_map}
\alias{map_cplx}
\alias{map2_cplx}
\alias{imap_cplx}
\alias{pmap_cplx}
\title{Complex Mapping Functions}
\usage{
map_cplx(.x, .f, ...)

map2_cplx(.x, .y, .f, ...)

imap_cplx(.x, .f, ...)

pmap_cplx(.l, .f, ...)
}
\arguments{
\item{.x}{A list or atomic vector}

\item{.f}{A function, formula, or vector (not necessarily atomic).

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous
functions. Note that formula functions conceptually take dots
(that's why you can use \code{..1} etc). They silently ignore
additional arguments that are not used in the formula expression.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it is
converted to an extractor function. Character vectors index by
name and numeric vectors index by position; use a list to index
by position and name at different levels. If a component is not
present, the value of \code{.default} will be returned.}

\item{...}{Arguments to the mapping function}

\item{.y}{A vector of the same length as \code{.x}. A vector of length 1 will be recycled.}

\item{.l}{A list of vectors, such as a data frame. The length of \code{.l} determines the number of arguments that \code{.f} will be called with. List names will be used if present.}
}
\value{
A \link{complex} vector coerced from the mapping function and arguments
}
\description{
The complex mapping functions transform the output lists from common mapping functions found in the \code{purrr} package to complex vectors.
}
\details{
Supported \code{purrr} mapping functions:
\describe{
\item{\link[purrr:map]{purrr::map}}{Call \code{.f} using an argument of \code{.x}}
\item{\link[purrr:map2]{purrr::map2}}{Call \code{.f} using arguments of \code{.x} and \code{.y}}
\item{\link[purrr:imap]{purrr::imap}}{Call \code{.f} using arguments of \code{.x} and \code{names(.x)}}
\item{\link[purrr:map2]{purrr::pmap}}{Call \code{.f} using arguments contained in \code{.l}}
}
}
\seealso{
\link{complex}, \link[purrr:map]{purrr::map}, \link[purrr:map2]{purrr::map2}
}
